import{_ as o,c as r,d as a,a as l,b as n,w as t,r as p,o as c,e as i}from"./app-C1uG88mu.js";const d="/assets/chrome_HDLtln4FA3-Dn9tiz6t.png",u={},h={class:"table-of-contents"};function v(m,e){const s=p("router-link");return c(),r("div",null,[e[13]||(e[13]=a("h1",{id:"id-api-reference",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#id-api-reference"},[a("span",null,"ID API Reference")])],-1)),e[14]||(e[14]=a("h2",{id:"table-of-contents",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#table-of-contents"},[a("span",null,"Table of Contents")])],-1)),a("nav",h,[a("ul",null,[a("li",null,[n(s,{to:"#table-of-contents"},{default:t(()=>[...e[0]||(e[0]=[i("Table of Contents",-1)])]),_:1})]),a("li",null,[n(s,{to:"#base-url"},{default:t(()=>[...e[1]||(e[1]=[i("Base URL",-1)])]),_:1})]),a("li",null,[n(s,{to:"#api-reference"},{default:t(()=>[...e[2]||(e[2]=[i("API Reference",-1)])]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#get-user"},{default:t(()=>[...e[3]||(e[3]=[i("Get User",-1)])]),_:1})]),a("li",null,[n(s,{to:"#get-user-connections"},{default:t(()=>[...e[4]||(e[4]=[i("Get User Connections",-1)])]),_:1})]),a("li",null,[n(s,{to:"#update-email"},{default:t(()=>[...e[5]||(e[5]=[i("Update Email",-1)])]),_:1})]),a("li",null,[n(s,{to:"#associate-password"},{default:t(()=>[...e[6]||(e[6]=[i("Associate Password",-1)])]),_:1})])])]),a("li",null,[n(s,{to:"#elevated-access-tokens"},{default:t(()=>[...e[7]||(e[7]=[i("Elevated Access Tokens",-1)])]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#request-a-verification-code"},{default:t(()=>[...e[8]||(e[8]=[i("Request a Verification Code",-1)])]),_:1})]),a("li",null,[n(s,{to:"#exchange-verification-code-for-eat"},{default:t(()=>[...e[9]||(e[9]=[i("Exchange Verification Code for EAT",-1)])]),_:1})]),a("li",null,[n(s,{to:"#handling-eat-in-backend-apis"},{default:t(()=>[...e[10]||(e[10]=[i("Handling EAT in Backend APIs",-1)])]),_:1})]),a("li",null,[n(s,{to:"#store-eat-in-local-storage"},{default:t(()=>[...e[11]||(e[11]=[i("Store EAT in Local Storage",-1)])]),_:1})]),a("li",null,[n(s,{to:"#eat-expiration"},{default:t(()=>[...e[12]||(e[12]=[i("EAT Expiration",-1)])]),_:1})])])])])]),e[15]||(e[15]=l(`<h2 id="base-url" tabindex="-1"><a class="header-anchor" href="#base-url"><span>Base URL</span></a></h2><p>The base URL for the ID API is <code>https://id.stream.tv/api/</code>.</p><h2 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference"><span>API Reference</span></a></h2><h3 id="get-user" tabindex="-1"><a class="header-anchor" href="#get-user"><span>Get User</span></a></h3><p>Gets the current authenticated user.</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">GET https://id.stream.tv/api/users/@me</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="get-user-connections" tabindex="-1"><a class="header-anchor" href="#get-user-connections"><span>Get User Connections</span></a></h3><p>Gets the current authenticated user&#39;s connections.</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">GET https://id.stream.tv/api/users/@me/connections</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="update-email" tabindex="-1"><a class="header-anchor" href="#update-email"><span>Update Email</span></a></h3><p>Updates the current authenticated user&#39;s email.</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">POST https://id.stream.tv/api/users/@me/update-email</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="associate-password" tabindex="-1"><a class="header-anchor" href="#associate-password"><span>Associate Password</span></a></h3><p>Only for shadow accounts.</p><p>Associates a password with the current authenticated user.</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">POST https://id.stream.tv/api/users/@me/associate-password</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="elevated-access-tokens" tabindex="-1"><a class="header-anchor" href="#elevated-access-tokens"><span>Elevated Access Tokens</span></a></h2><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>This feature is currently in public beta and may change in the future.</p></div><p><img src="`+d+`" alt="Elevated Access Token"></p><p>An Elevated Access Token (EAT) is a special type of access token that grants access to certain resources that are not available to regular access tokens. EATs are used to perform administrative tasks, such as managing your security settings like 2-Step Verification, YubiKeys, and recovery options.</p><h3 id="request-a-verification-code" tabindex="-1"><a class="header-anchor" href="#request-a-verification-code"><span>Request a Verification Code</span></a></h3><p>To request an Elevated Access Token, you must first authenticate with the ID API using your regular access token. Once you have authenticated, you can request a one-time verification code that you can use to exchange for an EAT. To request a verification code, send a <code>POST</code> request to the <code>/api/eat/request-verification</code> endpoint:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">POST https://id.stream.tv/api/eat/request-verification</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="exchange-verification-code-for-eat" tabindex="-1"><a class="header-anchor" href="#exchange-verification-code-for-eat"><span>Exchange Verification Code for EAT</span></a></h3><p>Once you have requested a verification code, you can exchange it for an Elevated Access Token. To exchange the verification code for an EAT, send a <code>POST</code> request to the <code>/api/eat/verify-code</code> endpoint:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">POST https://id.stream.tv/api/eat/verify-code</span>
<span class="line"><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/json</span></span></span>
<span class="line"><span class="token application-json"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;your_verification_code&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="handling-eat-in-backend-apis" tabindex="-1"><a class="header-anchor" href="#handling-eat-in-backend-apis"><span>Handling EAT in Backend APIs</span></a></h3><p>Once you have exchanged your verification code for an EAT, you can use it to perform administrative tasks in OWN3D Backend APIs that require elevated access. To use an EAT in your backend APIs, you need to include it in the <code>Elevated-Access-Token</code> header of your requests. Here is an example of how you can use an EAT in your API requests:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">GET https://example.com/api/admin</span>
<span class="line"><span class="token header"><span class="token header-name keyword">Authorization</span><span class="token punctuation">:</span> <span class="token header-value">Bearer &lt;your_access_token&gt;</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Elevated-Access-Token</span><span class="token punctuation">:</span> <span class="token header-value">&lt;your_eat&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Verify EAT in Backend APIs</strong></p><p>The OWN3D Backend APIs themselves use the ID API to verify EATs. To verify an EAT in your backend API, you need to send a <code>GET</code> request to the <code>/api/eat/verify</code> endpoint with the EAT included in the <code>Elevated-Access-Token</code> header:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">GET https://id.stream.tv/api/eat/verify</span>
<span class="line"><span class="token header"><span class="token header-name keyword">Authorization</span><span class="token punctuation">:</span> <span class="token header-value">Bearer &lt;your_access_token&gt;</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Elevated-Access-Token</span><span class="token punctuation">:</span> <span class="token header-value">&lt;your_eat&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the EAT is valid, the API will return a <code>200 OK</code> response. If the EAT is invalid or expired, the API will return a <code>401 Unauthorized</code> response.</p><h3 id="store-eat-in-local-storage" tabindex="-1"><a class="header-anchor" href="#store-eat-in-local-storage"><span>Store EAT in Local Storage</span></a></h3><p>It is recommended to store your EAT in local storage for future use. Just make sure to keep it secure and never share it with anyone. You need to store at least the <code>id</code>, <code>user_id</code> and <code>expires_at</code> fields. Here is an example of how you can store your EAT in local storage:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/eat/verify-code&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token string">&#39;your_verification_code&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;eat&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="eat-expiration" tabindex="-1"><a class="header-anchor" href="#eat-expiration"><span>EAT Expiration</span></a></h3><p>Elevated Access Tokens expire after a certain period of time. To avoid form submission errors, you should renew your EAT before it expires. The recommended time to renew your EAT is 5 minutes before it expires.</p>`,38))])}const g=o(u,[["render",v]]),k=JSON.parse('{"path":"/docs/id/reference.html","title":"ID API Reference","lang":"en-US","frontmatter":{},"git":{},"filePathRelative":"docs/id/reference.md"}');export{g as comp,k as data};

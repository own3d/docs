import{_ as i,c as r,d as s,a as o,e as a,b as t,w as c,r as p,o as u}from"./app-C1uG88mu.js";const d={},k={id:"alert-variations",tabindex:"-1"},v={class:"header-anchor",href:"#alert-variations"},m={id:"list-of-global-variables",tabindex:"-1"},b={class:"header-anchor",href:"#list-of-global-variables"},f={id:"list-of-alert-type-specific-variables",tabindex:"-1"},h={class:"header-anchor",href:"#list-of-alert-type-specific-variables"};function q(g,n){const e=p("Badge"),l=p("RouteLink");return u(),r("div",null,[s("h1",k,[s("a",v,[s("span",null,[n[0]||(n[0]=a("Alert Variations ",-1)),t(e,{text:"AE4",type:"success"})])])]),n[10]||(n[10]=s("p",null,[a("An alert variation is a specific configuration that defines how an alert should appear for a particular scenario. Each variation has its own set of "),s("code",null,"conditions"),a(" and "),s("code",null,"overrides"),a(".")],-1)),n[11]||(n[11]=s("p",null,[a("We use "),s("a",{href:"https://jsonlogic.com/",target:"_blank",rel:"noopener noreferrer"},"JsonLogic"),a(" to define alert variation conditions. Conditions are used to determine which variation should be used for a given alert. They are defined using logical operators and compare variables to specific values.")],-1)),s("h3",m,[s("a",b,[s("span",null,[n[1]||(n[1]=a("List of Global Variables ",-1)),t(e,{text:"AE4",type:"success"})])])]),n[12]||(n[12]=o("<p>The following variables are available for use in alert variation conditions for all alert types:</p><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><code>type</code></td><td>The type of alert.</td></tr><tr><td><code>platform</code></td><td>The type of alert.</td></tr><tr><td><code>enabled</code></td><td>Whether the alert is enabled.</td></tr><tr><td><code>random</code></td><td>A random number between 1 and 100.</td></tr></tbody></table>",2)),s("h3",f,[s("a",h,[s("span",null,[n[2]||(n[2]=a("List of Alert Type Specific Variables ",-1)),t(e,{text:"AE4",type:"success"})])])]),s("p",null,[n[4]||(n[4]=a("Technically you can combine all ",-1)),t(l,{to:"/docs/alerts/template-parameters.html"},{default:c(()=>[...n[3]||(n[3]=[a("Message Template Parameters",-1)])]),_:1}),n[5]||(n[5]=a(" as variables in your alert variation conditions. For example, you can use ",-1)),n[6]||(n[6]=s("code",null,"amount",-1)),n[7]||(n[7]=a(" to compare the amount of a donation or ",-1)),n[8]||(n[8]=s("code",null,"name",-1)),n[9]||(n[9]=a(" to compare the name of the person who triggered the alert.",-1))]),n[13]||(n[13]=o(`<p>You can also find a list of existing parameters for each alert type using the <a href="https://dev.own3d.tv/resources/alert-variations.json" target="_blank" rel="noopener noreferrer">resources/alert-variations.json</a> api endpoint.</p><p>Here is an example of an alert variation configuration for a Twitch Cheer alert:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Twitch Cheer&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;conditions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;and&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token property">&quot;===&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">&quot;var&quot;</span><span class="token operator">:</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;cheer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token property">&quot;===&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">&quot;var&quot;</span><span class="token operator">:</span> <span class="token string">&quot;platform&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;twitch&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token property">&quot;===&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">&quot;var&quot;</span><span class="token operator">:</span> <span class="token string">&quot;enabled&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token property">&quot;&gt;=&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">&quot;var&quot;</span><span class="token operator">:</span> <span class="token string">&quot;amount&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;overrides&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Thanks {{name}} for cheering over 1K bits!ðŸ’ƒðŸ’ƒðŸ’ƒ&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3))])}const x=i(d,[["render",q]]),w=JSON.parse('{"path":"/docs/alerts/variations.html","title":"Alert Variations","lang":"en-US","frontmatter":{},"git":{},"filePathRelative":"docs/alerts/variations.md"}');export{x as comp,w as data};

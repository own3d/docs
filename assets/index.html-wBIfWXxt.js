import{_ as p,c,d as t,a,e as n,b as s,w as i,r,o as u}from"./app-C1uG88mu.js";const d="/assets/extensions-Dk_wwRkn.png",h="/assets/extensions-example-BUS3RS0A.png",g="/assets/chrome_fgxfMmgjoX-VqQCrjao.png",m="/assets/chrome_fyhW4WftdM-DB4aToia.png",f="/assets/chrome_VIMFd8NdYA-r4S49X1h.png",b="/assets/chrome_LjZ8dXDy6Q-plUHPKVD.png",y="/assets/console_details-CYg2tuPH.png",x="/assets/console_contact-BkAYj1a8.png",v="/assets/console_presence-Dfg7CX4y.png",w="/assets/console_versions-nMrnqbGO.png",k="/assets/console_screenshots-qR-38jIr.png",T="/assets/console_detail_sections-6xq9nTSv.png",_="/assets/img_square-qFQf5GLN.png",D="/assets/img_landscape-DbYpRFSl.png",S="/assets/img_detail_section-BwL_5sG6.png",q="/assets/chrome_0BBIbwuEUP-B9vgXxOm.png",W="/assets/chrome_8bGtvNauVp-CIrurMbi.png",E={},N={id:"getting-started",tabindex:"-1"},C={class:"header-anchor",href:"#getting-started"};function B(I,e){const l=r("Badge"),o=r("RouteLink");return u(),c("div",null,[t("h1",N,[t("a",C,[t("span",null,[e[0]||(e[0]=n("Getting Started ",-1)),s(l,{text:"public beta",type:"warning"})])])]),e[22]||(e[22]=a('<h2 id="what-is-an-extension" tabindex="-1"><a class="header-anchor" href="#what-is-an-extension"><span>What is an Extension?</span></a></h2><p>Extensions are hosted html, css and javascript files, small applications, which are hosted by our content delivery network. They allow streamers to add functionality to their OWN3D Pro Dashboard, Scene Editor, and OBS Studio installation. The backend must be hosted by the extension author themselves.</p><p><img src="'+d+'" alt="extension example"></p><h2 id="types-of-extensions" tabindex="-1"><a class="header-anchor" href="#types-of-extensions"><span>Types of Extensions</span></a></h2><p>There are two main use-case types of extensions:</p><h3 id="dashboard-extensions" tabindex="-1"><a class="header-anchor" href="#dashboard-extensions"><span>Dashboard Extensions</span></a></h3><p>With dashboard extensions, you can add new features to the OWN3D Pro Dashboard, like a new widget or a new page allowing the streamer to extend the functionality of the dashboard with your own features.</p><h3 id="scene-editor-widget-extensions" tabindex="-1"><a class="header-anchor" href="#scene-editor-widget-extensions"><span>Scene Editor Widget Extensions</span></a></h3><p>With scene editor widget extensions, you can add new widgets to the OWN3D Pro Scene Editor. This can be something like a real-time heart rate monitor or informative widgets like a leaderboard, donation goal, or a chat.</p><p>These widgets can also be added to the OBS Studio installation using browser sources.</p><h2 id="compatibilities" tabindex="-1"><a class="header-anchor" href="#compatibilities"><span>Compatibilities</span></a></h2><p>Extensions support different compatibilities. Each compatibility represents a &quot;feature&quot; of the extension. For example, a compatibility can be a &quot;<strong>browser-source</strong>&quot; or &quot;<strong>standalone</strong>&quot;, which allows the extension to be used as Scene Editor Widget or as a Standalone App in the OWN3D Pro Dashboard.</p><p>You can also add additional compatibilities to your extension, like &quot;<strong>config</strong>&quot;, which allows you to add a configuration page to your extension details page allowing the streamer to configure your extension.</p><p>Here is a list of all supported compatibilities:</p><table><thead><tr><th>ID</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>2</td><td>Standalone Extension</td><td>The <code>browser-source</code> compatibility allows the extension to be used as a Scene Editor Widget.</td></tr><tr><td>4</td><td>Scene Editor Widget Extension</td><td>The <code>standalone</code> compatibility allows the extension to be used as a Standalone App in the OWN3D Pro Dashboard.</td></tr><tr><td>5</td><td>Configuration Page</td><td>The <code>config</code> compatibility allows you to add a configuration page to your extension details page allowing the streamer to configure your extension.</td></tr></tbody></table><p>Other compatibilities are planned for the future.</p><p><img src="'+d+'" alt="extension example"></p><h2 id="create-your-first-extension" tabindex="-1"><a class="header-anchor" href="#create-your-first-extension"><span>Create your first Extension</span></a></h2><p>The following guide will help you to create your first extension, test it, and publish it to the public. You can create your own extensions using our <a href="https://console.dev.own3d.tv" target="_blank" rel="noopener noreferrer">Developer Console</a>.</p><p><img src="'+h+'" alt="extension example"></p><p>To assist you in getting started, we&#39;ve developed a fundamental boilerplate extension that serves as a starting point for your own extensions. It demonstrates how to use the API and communicate with the backend, and how to construct and package your extension.</p><h3 id="step-1-checkout-our-example-extension" tabindex="-1"><a class="header-anchor" href="#step-1-checkout-our-example-extension"><span>Step 1: Checkout our example extension</span></a></h3><p>Clone our example extension from <a href="https://github.com/own3d/extension-boilerplate" target="_blank" rel="noopener noreferrer">GitHub</a> and start editing the files.</p><p>The entrypoint of the extension is the <code>index.html</code> file.</p><h3 id="step-2-create-a-new-extension" tabindex="-1"><a class="header-anchor" href="#step-2-create-a-new-extension"><span>Step 2: Create a new extension</span></a></h3><p>To create a new extension, you need to log in to the <a href="https://console.dev.own3d.tv/" target="_blank" rel="noopener noreferrer">developer portal</a> and create a new extension.</p><p><img src="'+g+'" alt="chrome_fgxfMmgjoX.png"></p>',27)),t("p",null,[e[2]||(e[2]=n("After filling out and submitting the form, OWN3D will create a new ",-1)),e[3]||(e[3]=t("strong",null,"Extension",-1)),e[4]||(e[4]=n(" & ",-1)),e[5]||(e[5]=t("strong",null,"Extension Version",-1)),e[6]||(e[6]=n(" (1.0.0) for you. This Extension Version will be in the ",-1)),s(o,{to:"/docs/extensions/live-circle.html"},{default:i(()=>[...e[1]||(e[1]=[n("Local Test",-1)])]),_:1}),e[7]||(e[7]=n(" state by default.",-1))]),e[23]||(e[23]=t("h3",{id:"step-3-add-internal-testers",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#step-3-add-internal-testers"},[t("span",null,"Step 3: Add Internal Testers")])],-1)),t("p",null,[e[9]||(e[9]=n("Within your ",-1)),e[10]||(e[10]=t("strong",null,"Extension Version",-1)),e[11]||(e[11]=n(", you can add up to 10 internal testers to your extension. These testers can be added using the ",-1)),s(o,{to:"/docs/extensions/access-control.html"},{default:i(()=>[...e[8]||(e[8]=[n("Access Control",-1)])]),_:1}),e[12]||(e[12]=n(" settings. You can add them by their ID or username.",-1))]),e[24]||(e[24]=a('<p><img src="'+m+`" alt="chrome_fyhW4WftdM.png"></p><h3 id="step-4-define-your-compatibilities-test-your-extension" tabindex="-1"><a class="header-anchor" href="#step-4-define-your-compatibilities-test-your-extension"><span>Step 4: Define your Compatibilities &amp; Test your Extension</span></a></h3><p>Still in your <strong>Extension Version</strong>, you can define the compatibilities of your extension. You can add multiple compatibilities to your extension, like <code>browser-source</code> or <code>standalone</code>. <strong>Without this step, your will not be able to locate your extension in the OWN3D Pro Dashboard or Scene Editor.</strong></p><p>Inside your compatibility settings you can define the following:</p><ul><li><strong>Path</strong>: The relative path to your extension&#39;s entrypoint (e.g. <code>index.html</code>).</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Because our CDN serves your extension files inside a version subdirectory<br> (e.g. <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank" rel="noopener noreferrer">https://extension-id.ext-own3d.tv/1.0.0/index.html</a>), you will need to set your base path in your Vite, React or Vue configuration to be relative to <code>./</code> before building your extension.</p><p>For Vite, this would look like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// https://vitejs.dev/config/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token comment">// or explicit /1.0.0/ (depending on your version)</span></span>
<span class="line">    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>For Scene Editor Widgets, you can define additional settings:</p>`,7)),t("ul",null,[e[21]||(e[21]=t("li",null,[t("strong",null,"Sizing"),n(": The initial dimension and position of your widget (e.g. "),t("code",null,"300x300"),n(").")],-1)),t("li",null,[t("strong",null,[s(o,{to:"/docs/extensions/syntax-for-forms.html"},{default:i(()=>[...e[13]||(e[13]=[n("Forms",-1)])]),_:1})]),e[14]||(e[14]=n(": The form fields of your widget (e.g. ",-1)),e[15]||(e[15]=t("code",null,"input",-1)),e[16]||(e[16]=n(", ",-1)),e[17]||(e[17]=t("code",null,"color",-1)),e[18]||(e[18]=n(", ",-1)),e[19]||(e[19]=t("code",null,"font-settings",-1)),e[20]||(e[20]=n(").",-1))])]),e[25]||(e[25]=a('<p>After defining your compatibilities, you will find <strong>Internal Test URL&#39;s</strong> for your extension. You can use these URL&#39;s to test your extension in the OWN3D Pro Dashboard.</p><p><img src="'+f+'" alt="chrome_VIMFd8NdYA.png"></p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>To test any widget extension, simply open our Scene Builder and add your extension as a new widget found in the <strong>Extensions (Invite Only)</strong> tab. You need to be a member of the internal testers to see your extension there.</p><p><strong>Widgets added to your Scene Builder via this tab will be locked to the selected version and will not be updated automatically, even if you publish a new version!</strong></p><p><img src="'+b+'" alt="chrome_LjZ8dXDy6Q.png"></p></div><h3 id="step-5-upload-it-to-our-cdn" tabindex="-1"><a class="header-anchor" href="#step-5-upload-it-to-our-cdn"><span>Step 5: Upload it to our CDN</span></a></h3><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>You don&#39;t need to upload your extension to our CDN during development. You can use a local webserver with HTTPS support to test your extension. You can use <a href="https://ngrok.com/" target="_blank" rel="noopener noreferrer">ngrok</a> to create a secure tunnel to your local webserver too.</p></div><p>If you&#39;re done with the extension, you can upload it to our CDN using the <a href="https://console.dev.own3d.tv/" target="_blank" rel="noopener noreferrer">developer portal</a>.</p><p>Within the developer portal, you can customize your extension&#39;s settings, such as the name, description, as well as the hosting endpoints for the widget, dashboard, and configuration page.</p><h3 id="step-6-update-your-extension-details-and-presence" tabindex="-1"><a class="header-anchor" href="#step-6-update-your-extension-details-and-presence"><span>Step 6: Update your extension details and presence</span></a></h3><p>When the development of your extension is finished and you are ready to submit it for review, take some time and add some details and screenshots. This is required to be finished before submitting for review, as editing this information is not available after this step.</p><h4 id="basic-information" tabindex="-1"><a class="header-anchor" href="#basic-information"><span>Basic information</span></a></h4><p>We highly recommend to give your extension a clear and unique name, as well as a good description. This information is used for searching in our store, so a fitting description helps with discoverability of your extension. A fitting extension category will get you listed in corresponding category pages.</p><p><img src="'+y+'" alt="console_details.png"></p><h4 id="contact-information" tabindex="-1"><a class="header-anchor" href="#contact-information"><span>Contact information</span></a></h4><p>Providing contact information is required to give us and the users a way to contact you in case of questions or issues. Some of this information is optional, as it might not be required in certain cases, but we will let you know, if required information is missing for your specific extension.</p><p><img src="'+x+'" alt="console_contact.png"></p><h4 id="images-and-videos" tabindex="-1"><a class="header-anchor" href="#images-and-videos"><span>Images and videos</span></a></h4><p>When submitting an extension, we require at least a discovery image and a logo to be uploaded. The discovery image will be visible in the store search, while the logo may appear in places, where less space is available.</p><p>Uploading a discovery video and icon is optional, but is highly recommended. The video will be playing when hovering over your extension in search results and makes it more lively. The icon is especially useful for dashboard extensions, as those can be displayed in the dashboard sidebar.</p><p>For supported formats and recommended layout techniques, please refer to the respective <a href="#media-formats">section</a> below.</p><p><img src="'+v+'" alt="console_presence.png"></p><h4 id="version-details" tabindex="-1"><a class="header-anchor" href="#version-details"><span>Version details</span></a></h4><p>The individual versions contain information separate from the main extension. This includes information about premium features that can be unlocked via purchases or a OWN3D.PRO subscription.</p><p><img src="'+w+'" alt="console_versions.png"></p><h4 id="screenshots" tabindex="-1"><a class="header-anchor" href="#screenshots"><span>Screenshots</span></a></h4><p>Apart from using your discovery image and video, you are also able to upload screenshots, that will be displayed in a gallery on your extension&#39;s detail page.</p><p>For supported formats and recommended layout techniques, please refer to the respective <a href="#media-formats">section</a> below.</p><p><img src="'+k+'" alt="console_screenshots.png"></p><h4 id="detail-sections" tabindex="-1"><a class="header-anchor" href="#detail-sections"><span>Detail sections</span></a></h4><p>Ever dreamed of a full store presence without the hassle of building a custom layout? We got you! By using our system for &quot;detail sections&quot;, you are able to define an arbitrary amount of sections that are displayed below your image gallery on the detail page.</p><p>All fields are required when it comes to the review process. The label is used as a tab in the header for immediate navigation to your presented features, while the title and text are rendered in a way that fits our store design. Every other section flips the text and media to provide an alternating visual.</p><p>For supported formats and recommended layout techniques, please refer to the respective <a href="#media-formats">section</a> below.</p><p><img src="'+T+'" alt="console_detail_sections.png"></p><h3 id="step-7-review-and-publish-it" tabindex="-1"><a class="header-anchor" href="#step-7-review-and-publish-it"><span>Step 7: Review and publish it</span></a></h3><p>After pushing your extension in a hosted-test state, you can use it in your OWN3D Pro dashboard. There you can test all the features of your extension. If you want to publish your extension to the public, you need to submit your extension for a code and feature review.</p><h2 id="media-formats" tabindex="-1"><a class="header-anchor" href="#media-formats"><span>Media formats</span></a></h2><h3 id="discovery-images" tabindex="-1"><a class="header-anchor" href="#discovery-images"><span>Discovery images</span></a></h3><p>Discovery images are required to be in a square format to fit our tile-based search in the store. We recommend to limit your main content to a contained 16:9 area, as we might re-use this image in other places as well.</p><p>The file dimensions are required to be 1080px in both directions.</p><p><img src="'+_+'" alt="img_square.png"></p><h3 id="discovery-videos" tabindex="-1"><a class="header-anchor" href="#discovery-videos"><span>Discovery videos</span></a></h3><p>Discovery videos are required to be in a 16:9 format to fit our hover preview in the store. We recommend to limit your main content to a contained 4:3 area, as we will also display the video in the gallery slider on the detail page.</p><p>The file dimensions are required to be 1280x720.</p><p><img src="'+D+'" alt="img_landscape.png"></p><h3 id="logos-and-icons" tabindex="-1"><a class="header-anchor" href="#logos-and-icons"><span>Logos and icons</span></a></h3><p>Logos and icons are required to be in a square format.</p><p>The file dimensions must be 150px in both directions for logos and 40px for icons.</p><h3 id="detail-sections-1" tabindex="-1"><a class="header-anchor" href="#detail-sections-1"><span>Detail sections</span></a></h3><p>Detail sections are required to be in a 4:3 format to fit our layout.</p><p>The file dimensions are required to be 1080x810.</p><p><img src="'+S+`" alt="img_detail_section.png"></p><h2 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging"><span>Debugging</span></a></h2><h3 id="development-tools-feature-flags" tabindex="-1"><a class="header-anchor" href="#development-tools-feature-flags"><span>Development Tools &amp; Feature Flags</span></a></h3><div class="hint-container caution"><p class="hint-container-title">Caution</p><p><strong>This tool is really for debugging purposes only!</strong> It is not recommended to use it in a production environment, as some features may break or not work as expected.</p></div><p>To enable the values&#39; inspector, call the following method in your browser console:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">localStorage.setItem(&#39;devtools&#39;, true)</span>
<span class="line">Press: Ctrl+Shift+F</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+q+'" alt="chrome_0BBIbwuEUP.png"></p><p>Then enable the <strong>Show Values Inspector</strong> feature flag in the developer console. This will show you the values of the form fields of any widget inside the Scene Builder.</p><p><img src="'+W+'" alt="chrome_8bGtvNauVp.png"></p>',58))])}const V=p(E,[["render",B]]),O=JSON.parse('{"path":"/docs/extensions/","title":"Getting Started","lang":"en-US","frontmatter":{},"git":{},"filePathRelative":"docs/extensions/README.md"}');export{V as comp,O as data};
